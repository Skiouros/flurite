// Generated by CoffeeScript 1.7.1
(function() {
  var Application, bind, verbs, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require("underscore");

  bind = function(method, context) {
    return function() {
      return method.apply(context, arguments);
    };
  };

  verbs = {
    "get": "get",
    "post": "post",
    "delete": "delete",
    "put": "put"
  };

  Application = (function() {
    Application.prototype.routes = {};

    function Application(app) {
      this.app = app;
      this.url_for = __bind(this.url_for, this);
    }

    Application.prototype.handle_req = function(req, res, args) {
      args.values.url_for = this.url_for;
      args.values["static"] = this.app.get("static");
      if (args.redirect != null) {
        return res.redirect(args.redirect);
      } else if ((args.layout != null) && !args.json) {
        return res.render(args.layout, args.values);
      } else if (args.json) {
        return res.send(JSON.stringify(args.json));
      }
    };

    Application.prototype.include = function(klass) {
      var fn, k, obj, options, p, path, paths, route, routes, _i, _j, _len, _len1, _ref, _results;
      obj = new klass();
      routes = (function() {
        var _results;
        _results = [];
        for (k in obj) {
          if (k !== "path" && k !== "name") {
            _results.push(k);
          }
        }
        return _results;
      })();
      paths = [];
      for (_i = 0, _len = routes.length; _i < _len; _i++) {
        route = routes[_i];
        fn = null;
        if (typeof obj[route] === "function") {
          options = obj[route]();
          if (options == null) {
            throw "Route: " + route + " must have action";
          }
          options.name = route;
          paths.push({
            path: route,
            options: options
          });
          continue;
        }
        _ref = obj[route];
        for (path in _ref) {
          fn = _ref[path];
          options = fn();
          options.name = route;
          paths.push({
            path: path,
            options: options
          });
        }
      }
      _results = [];
      for (_j = 0, _len1 = paths.length; _j < _len1; _j++) {
        p = paths[_j];
        if (klass.route_name) {
          p.options.name = "" + klass.route_name + p.options.name;
        }
        if (klass.before != null) {
          p.options.before = klass.before;
        }
        if (klass.path) {
          if (klass.path) {
            p.path = "" + klass.path + p.path;
          }
          if (p.path.slice(-1) === "/") {
            p.path = p.path.slice(0, -1);
          }
        }
        _results.push(this.route(p.path, p.options));
      }
      return _results;
    };

    Application.prototype.route = function(path, options) {
      var cb, verb, _results;
      if (options.name != null) {
        this.routes[options.name] = path;
      }
      _results = [];
      for (verb in verbs) {
        cb = (function(_this) {
          return function(req, res, next) {
            var before, cb_chain, params, req_obj;
            params = _.extend({}, req.body, req.query, req.params);
            req_obj = {
              req: req,
              res: res,
              params: params,
              next: next,
              url_for: _this.url_for
            };
            req_obj.done = function(args) {
              if (args.values == null) {
                args.values = {};
              }
              console.log(args);
              return _this.handle_req(req, res, args);
            };
            cb_chain = function() {
              var method;
              method = options[req.method.toLowerCase()];
              while (typeof method === "function") {
                method = bind(method, req_obj);
                if (method != null) {
                  method = method();
                }
              }
              if (method != null) {
                if (method.values == null) {
                  method.values = {};
                }
                return _this.handle_req(req, res, method);
              }
            };
            if (options.before != null) {
              before = bind(options.before, req_obj);
            }
            if (before) {
              if (before != null) {
                return before(cb_chain);
              }
            } else {
              return cb_chain();
            }
          };
        })(this);
        if (options[verb] != null) {
          _results.push(this.app[verb](path, cb));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Application.prototype.url_for = function(name) {
      return this.routes[name];
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
