// Generated by CoffeeScript 1.7.1
(function() {
  var C, ColumnType, add_column, create_index, create_table, db, drop_column, drop_index, drop_table, exists, extract_options, gen_index_name, rename_column, rename_table, types,
    __slice = [].slice;

  db = require("../db");

  exists = function(name) {
    return db.select("COUNT(*) as c FROM pg_class WHERE relname = " + (db.escape_var(name))).then(function(r) {
      return r.rows[0].c > 0;
    });
  };

  gen_index_name = function(name, col) {
    return "" + name + "_" + col + "_idx";
  };

  extract_options = function() {
    var columns, k, options, values, _i, _len, _ref;
    options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    columns = [];
    values = {};
    _ref = options[0];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      k = _ref[_i];
      if ("object" === typeof k) {
        values = k;
      } else {
        columns.push(k);
      }
    }
    return {
      columns: columns,
      options: values
    };
  };

  create_table = function(name, columns) {
    var buffer, c, q, _i, _len;
    q = "CREATE TABLE IF NOT EXISTS " + (db.escape_name(name)) + " (";
    buffer = [];
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      c = columns[_i];
      if ("string" === typeof c) {
        buffer.push(c);
      } else {
        buffer.push("" + (db.escape_name(c.name)) + " " + c.type);
      }
    }
    return db.query("" + q + "\n  " + (buffer.join(",\n  ")) + "\n)");
  };

  add_column = function(name, col_name, col_type) {
    name = db.escape_name(name);
    col_name = db.escape_name(col_name);
    return db.query("ALTER TABLE " + name + " ADD COLUMN " + col_name + " " + col_type);
  };

  drop_index = function(name, index) {
    return exists(index_name).then(function(exists) {
      if (exists) {
        return;
      }
      return db.query("DROP INDEX IF EXISTS " + (db.escape_name("" + name + "_" + index + "_idx")));
    });
  };

  drop_table = function(name) {
    return db.query("DROP TABLE IF EXISTS " + (db.escape_name(name)));
  };

  drop_column = function(name, col_name) {
    name = db.escape_name(name);
    col_name = db.escape_name(col_name);
    return db.query("ALTER TABLE " + name + " DROP COLUMN " + col_name);
  };

  create_index = function() {
    var index_name, name, options, res;
    name = arguments[0], options = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    res = extract_options(options);
    index_name = "" + name + "_" + (res.columns.join("")) + "_idx";
    return exists(index_name).then(function(exists) {
      var q;
      if (exists) {
        return;
      }
      q = ["CREATE"];
      if (res.options.unique) {
        q.push(" UNIQUE");
      }
      q.push(" INDEX ON " + (db.escape_name(name)) + " (");
      q.push("" + (res.columns.join(", ")) + ")");
      q.push(";");
      return db.query(q.join(""));
    });
  };

  rename_table = function(name_from, name_to) {
    name_from = db.escape_name(name_from);
    name_to = db.escape_name(name_to);
    return db.query("ALTER TABLE " + name_from + " RENAME TO " + name_to);
  };

  rename_column = function(name, col_from, col_to) {
    name = db.escape_name(name);
    col_from = db.escape_name(col_from);
    col_to = db.escape_name(col_to);
    return db.query("ALTER " + name + " RENAME COLUMN " + col_from + " TO " + col_to);
  };

  ColumnType = (function() {
    function ColumnType(base, default_opts) {
      this.base = base;
      this.default_opts = default_opts;
      if (this.default_opts == null) {
        this.default_opts = {};
      }
    }

    ColumnType.prototype.c = function(opts) {
      var k, out, v, _ref;
      out = this.base;
      _ref = this.default_opts;
      for (k in _ref) {
        v = _ref[k];
        if (opts[k] === null) {
          opts[k] = v;
        }
      }
      if (opts["default"] != null) {
        out = "" + out + " DEFAULT " + (db.escape_var(opts["default"]));
      }
      if (opts["null"] != null) {
        out = "" + out + " NOT NULL";
      }
      if (opts.primary_key != null) {
        out = "" + out + " PRIMARY KEY";
      }
      return out;
    };

    ColumnType.prototype.toString = function() {
      return this.c(this.default_opts);
    };

    return ColumnType;

  })();

  C = function(base, options) {
    return new ColumnType(base, options);
  };

  types = {
    serial: C("serial", {
      "null": false
    }),
    varchar: C("character varying(255)", {
      "null": false
    }),
    text: C("text", {
      "null": false
    }),
    time: C("timestamp", {
      "null": false
    }),
    date: C("date", {
      "null": false
    }),
    integer: C("integer", {
      "null": false,
      "default": 0
    }),
    numeric: C("numeric", {
      "null": false,
      "default": 0
    }),
    real: C("real", {
      "null": false,
      "default": 0
    }),
    double: C("double percision", {
      "null": false,
      "default": 0
    }),
    boolean: C("boolean", {
      "null": false,
      "default": false
    }),
    timestamp: C("timestamp without time zone", {
      "null": false
    }),
    foreign_key: C("integer", {
      "null": false
    })
  };

  module.exports = {
    add_column: add_column,
    create_table: create_table,
    create_index: create_index,
    drop_index: drop_index,
    drop_table: drop_table,
    drop_column: drop_column,
    rename_table: rename_table,
    rename_colum: rename_column,
    exists: exists,
    types: types
  };

}).call(this);
